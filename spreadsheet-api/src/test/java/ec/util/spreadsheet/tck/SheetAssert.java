/*
 * Copyright 2016 National Bank of Belgium
 * 
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package ec.util.spreadsheet.tck;

import ec.util.spreadsheet.Cell;
import ec.util.spreadsheet.Sheet;
import static ec.util.spreadsheet.tck.Assertions.msg;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.SoftAssertions;
import org.assertj.core.groups.Tuple;
import org.assertj.core.util.Objects;

/**
 * {@link Sheet} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SheetAssert extends AbstractAssert<SheetAssert, Sheet> {

    /**
     * Creates a new <code>{@link SheetAssert}</code> to make assertions on
     * actual Sheet.
     *
     * @param actual the Sheet we want to make assertions on.
     */
    public SheetAssert(Sheet actual) {
        super(actual, SheetAssert.class);
    }

    /**
     * An entry point for SheetAssert to follow AssertJ standard
     * <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly:
     * <code>assertThat(mySheet)</code> and get specific assertion with code
     * completion.
     *
     * @param actual the Sheet we want to make assertions on.
     * @return a new <code>{@link SheetAssert}</code>
     */
    public static SheetAssert assertThat(Sheet actual) {
        return new SheetAssert(actual);
    }

    /**
     * Verifies that the actual Sheet's columnCount is equal to the given one.
     *
     * @param columnCount the given columnCount to compare the actual Sheet's
     * columnCount to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Sheet's columnCount is not equal
     * to the given one.
     */
    public SheetAssert hasColumnCount(int columnCount) {
        isNotNull();
        int actualColumnCount = actual.getColumnCount();
        if (actualColumnCount != columnCount) {
            failWithMessage("\nExpecting columnCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>", actual, columnCount, actualColumnCount);
        }
        return this;
    }

    /**
     * Verifies that the actual Sheet's name is equal to the given one.
     *
     * @param name the given name to compare the actual Sheet's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Sheet's name is not equal to the
     * given one.
     */
    public SheetAssert hasName(String name) {
        isNotNull();
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage("\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>", actual, name, actualName);
        }
        return this;
    }

    /**
     * Verifies that the actual Sheet's rowCount is equal to the given one.
     *
     * @param rowCount the given rowCount to compare the actual Sheet's rowCount
     * to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Sheet's rowCount is not equal to
     * the given one.
     */
    public SheetAssert hasRowCount(int rowCount) {
        isNotNull();
        int actualRowCount = actual.getRowCount();
        if (actualRowCount != rowCount) {
            failWithMessage("\nExpecting rowCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>", actual, rowCount, actualRowCount);
        }
        return this;
    }

    public SheetAssert hasCellValue(int i, int j, Object value) {
        isNotNull();
        Object actualCellValue = actual.getCellValue(i, j);
        if (!Objects.areEqual(actualCellValue, value)) {
            failWithMessage("\nExpecting cellValue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>", actual, value, actualCellValue);
        }
        return this;
    }

    public SheetAssert hasSameContentAs(Sheet other, boolean strict) throws IOException {
        isNotNull();
        SoftAssertions soft = new SoftAssertions();
        assertContentEquals(soft, actual, other, strict);
        soft.assertAll();
        return this;
    }

    //<editor-fold defaultstate="collapsed" desc="Internal implementation">
    static void assertCompliance(SoftAssertions s, Sheet sheet) {
        s.assertThat(sheet.getName()).isNotNull();
        assertInv(s, sheet);
        assertBounds(s, sheet);
        assertForEach(s, sheet);
        assertNulls(s, sheet);
        for (int i = 0; i < sheet.getRowCount(); i++) {
            for (int j = 0; j < sheet.getColumnCount(); j++) {
                Cell cell = sheet.getCell(i, j);
                Object value = sheet.getCellValue(i, j);
                if (cell != null) {
                    CellAssert.assertCompliance(s, cell);
                    s.assertThat(value).isEqualTo(cell.getValue());
                } else {
                    s.assertThat(value).isNull();
                }
            }
        }
    }

    private static void assertInv(SoftAssertions s, Sheet sheet) {
        Sheet inv = sheet.inv();
        s.assertThat(inv).isNotNull();
        assertContentEquals(s, sheet, inv.inv(), true);
        sheet.forEachValue((i, j, v) -> s.assertThat(v).isEqualTo(inv.getCellValue(j, i)));
    }

    private static void assertBounds(SoftAssertions s, Sheet sheet) {
        s.assertThat(sheet.getColumnCount()).isGreaterThanOrEqualTo(0);
        s.assertThat(sheet.getRowCount()).isGreaterThanOrEqualTo(0);
        s.assertThatThrownBy(() -> sheet.getCell(-1, -1))
                .as(msg(sheet, "getCell(int,int)", IndexOutOfBoundsException.class))
                .isInstanceOf(IndexOutOfBoundsException.class);
        s.assertThatThrownBy(() -> sheet.getCellValue(-1, -1))
                .as(msg(sheet, "getCellValue(int,int)", IndexOutOfBoundsException.class))
                .isInstanceOf(IndexOutOfBoundsException.class);
        s.assertThatThrownBy(() -> sheet.getCell(sheet.getRowCount(), sheet.getColumnCount()))
                .as(msg(sheet, "getCell(int,int)", IndexOutOfBoundsException.class))
                .isInstanceOf(IndexOutOfBoundsException.class);
        s.assertThatThrownBy(() -> sheet.getCellValue(sheet.getRowCount(), sheet.getColumnCount()))
                .as(msg(sheet, "getCellValue(int,int)", IndexOutOfBoundsException.class))
                .isInstanceOf(IndexOutOfBoundsException.class);
    }

    private static void assertForEach(SoftAssertions s, Sheet sheet) {
        List<Tuple> expected = new ArrayList<>();
        for (int i = 0; i < sheet.getRowCount(); i++) {
            for (int j = 0; j < sheet.getColumnCount(); j++) {
                Cell cell = sheet.getCell(i, j);
                if (cell != null) {
                    expected.add(summarize(i, j, cell.getValue()));
                }
            }
        }

        List<Tuple> forEachTuples = new ArrayList<>();
        sheet.forEach((i, j, c) -> forEachTuples.add(summarize(i, j, c.getValue())));
        s.assertThat(forEachTuples).containsExactlyElementsOf(expected);

        List<Tuple> forEachValueTuples = new ArrayList<>();
        sheet.forEachValue((i, j, v) -> forEachValueTuples.add(summarize(i, j, v)));
        s.assertThat(forEachValueTuples).containsExactlyElementsOf(expected);
    }

    private static Tuple summarize(int i, int j, Object value) {
        return Tuple.tuple(i, j, value);
    }

    @SuppressWarnings("null")
    private static void assertNulls(SoftAssertions s, Sheet sheet) {
        s.assertThatThrownBy(() -> sheet.forEach(null))
                .as(msg(sheet, "forEach(SheetConsumer)", NullPointerException.class))
                .isInstanceOf(NullPointerException.class);
        s.assertThatThrownBy(() -> sheet.forEachValue(null))
                .as(msg(sheet, "forEachValue(SheetConsumer)", NullPointerException.class))
                .isInstanceOf(NullPointerException.class);
    }

    static void assertContentEquals(SoftAssertions s, Sheet l, Sheet r, boolean strict) {
        s.assertThat(l.getName()).isEqualTo(r.getName());
        if (strict) {
            s.assertThat(l.getRowCount()).isEqualTo(r.getRowCount());
            s.assertThat(l.getColumnCount()).isEqualTo(r.getColumnCount());
        }
        l.forEachValue((i, j, v) -> s.assertThat(v).isEqualTo(r.getCellValue(i, j)));
        r.forEachValue((i, j, v) -> s.assertThat(v).isEqualTo(l.getCellValue(i, j)));
    }
    //</editor-fold>
}
