/*
 * Copyright 2016 National Bank of Belgium
 * 
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package ec.util.spreadsheet;

import static ec.util.spreadsheet.Assertions.msg;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Condition;
import org.assertj.core.api.SoftAssertions;
import org.assertj.core.data.Index;
import org.assertj.core.groups.Tuple;

/**
 * {@link Book} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BookAssert extends AbstractAssert<BookAssert, Book> {

    /**
     * Creates a new <code>{@link BookAssert}</code> to make assertions on
     * actual Book.
     *
     * @param actual the Book we want to make assertions on.
     */
    public BookAssert(Book actual) {
        super(actual, BookAssert.class);
    }

    /**
     * An entry point for BookAssert to follow AssertJ standard
     * <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly:
     * <code>assertThat(myBook)</code> and get specific assertion with code
     * completion.
     *
     * @param actual the Book we want to make assertions on.
     * @return a new <code>{@link BookAssert}</code>
     */
    public static BookAssert assertThat(Book actual) {
        return new BookAssert(actual);
    }

    /**
     * Verifies that the actual Book's sheetCount is equal to the given one.
     *
     * @param sheetCount the given sheetCount to compare the actual Book's
     * sheetCount to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Book's sheetCount is not equal to
     * the given one.
     */
    public BookAssert hasSheetCount(int sheetCount) {
        isNotNull();
        int actualSheetCount = actual.getSheetCount();
        if (actualSheetCount != sheetCount) {
            failWithMessage("\nExpecting sheetCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>", actual, sheetCount, actualSheetCount);
        }
        return this;
    }

    public BookAssert hasSameContentAs(Book other, boolean strict) throws IOException {
        isNotNull();
        SoftAssertions soft = new SoftAssertions();
        assertContentEquals(soft, actual, other, strict);
        soft.assertAll();
        return this;
    }

    public BookAssert has(Condition<? super Sheet> condition, Index index) throws IOException {
        isNotNull();
        SheetAssert.assertThat(actual.getSheet(index.value)).has(condition);
        return this;
    }

    public BookAssert satisfies(Consumer<? super Sheet> requirements, Index index) throws IOException {
        isNotNull();
        requirements.accept(actual.getSheet(index.value));
        return this;
    }

    //<editor-fold defaultstate="collapsed" desc="Internal implementation">
    static void assertCompliance(SoftAssertions s, Book book) throws IOException {
        assertBounds(s, book);
        assertForEach(s, book);
        assertNulls(s, book);
        assertGetSheetName(s, book);
        for (int index = 0; index < book.getSheetCount(); index++) {
            SheetAssert.assertCompliance(s, book.getSheet(index));
        }
    }

    private static void assertBounds(SoftAssertions s, Book book) {
        s.assertThat(book.getSheetCount()).isGreaterThanOrEqualTo(0);
        s.assertThatThrownBy(() -> book.getSheet(-1))
                .as(msg(book, "getSheet(int)", IndexOutOfBoundsException.class))
                .isInstanceOf(IndexOutOfBoundsException.class);
        s.assertThatThrownBy(() -> book.getSheet(book.getSheetCount()))
                .as(msg(book, "getSheet(int)", IndexOutOfBoundsException.class))
                .isInstanceOf(IndexOutOfBoundsException.class);
    }

    private static void assertForEach(SoftAssertions s, Book book) throws IOException {
        List<Tuple> expected = new ArrayList<>();
        for (int index = 0; index < book.getSheetCount(); index++) {
            expected.add(summarize(index, book.getSheet(index)));
        }

        List<Tuple> normal = new ArrayList<>();
        book.forEach((sheet, i) -> normal.add(summarize(i, sheet)));
        s.assertThat(normal).containsExactlyElementsOf(expected);

        Tuple[] parallel = new Tuple[book.getSheetCount()];
        book.parallelForEach((sheet, i) -> parallel[i] = summarize(i, sheet));
        s.assertThat(parallel).containsExactlyElementsOf(expected);
    }

    private static Tuple summarize(int index, Sheet sheet) {
        return Tuple.tuple(index, sheet.getName(), sheet.getRowCount(), sheet.getColumnCount());
    }

    @SuppressWarnings("null")
    private static void assertNulls(SoftAssertions s, Book book) throws IOException {
        s.assertThatThrownBy(() -> book.forEach(null))
                .as(msg(book, "forEach(ObjIntConsumer)", NullPointerException.class))
                .isInstanceOf(NullPointerException.class);
    }

    private static void assertGetSheetName(SoftAssertions s, Book book) throws IOException {
        for (int i = 0; i < book.getSheetCount(); i++) {
            s.assertThat(book.getSheetName(i)).isEqualTo(book.getSheet(i).getName());
        }
        s.assertThatThrownBy(() -> book.getSheetName(-1)).isInstanceOf(IndexOutOfBoundsException.class);
        s.assertThatThrownBy(() -> book.getSheetName(book.getSheetCount())).isInstanceOf(IndexOutOfBoundsException.class);
    }

    static void assertContentEquals(SoftAssertions s, Book l, Book r, boolean strict) throws IOException {
        s.assertThat(l.getSheetCount()).isEqualTo(r.getSheetCount());
        for (int index = 0; index < l.getSheetCount(); index++) {
            SheetAssert.assertContentEquals(s, l.getSheet(index), r.getSheet(index), strict);
        }
    }
    //</editor-fold>
}
